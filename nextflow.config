// Nextflow configuration for QTL2 Pipeline
// Single container approach for r/qtl2 and data manipulation

// Pipeline metadata
manifest {
    name            = 'QTL2_NF'
    author          = 'Dpbudke'
    homePage        = 'https://github.com/Dpbudke/QTL2_NF'
    description     = 'Nextflow pipeline for multiparental mouse QTL analysis using r/qtl2'
    mainScript      = 'main.nf'
    nextflowVersion = '>=23.04.0'
    version         = '1.0.0'
}

// Default parameters
params {
    // Input files (generated from your pre-pipeline RMD)
    phenotype_file     = 'Data/formatted_phenotypes_for_nextflow.csv'
    finalreport_file   = null  // Path to GeneSeek FinalReport file (usually extracted from zip)
    genotype_file      = null  // Will be added in future modules
    genetic_map        = null  // Will be added in future modules
    
    // Study configuration
    study_prefix       = 'MyStudy'
    auto_prefix_samples = false  // Set to true if you want automatic sample ID prefixing
    test_mode          = false   // Set to true to process chromosome 1 only (for development)
    
    // Output directory
    outdir             = 'results'
    
    // Process-specific parameters
    // Module 1: Phenotype Processing
    pheno_na_strings   = 'na,NA,N/A,'
    
    // Future modules (placeholders)
    // genotype_format    = 'qtl2'  // qtl2, plink, etc.
    // qtl_method         = 'scan1' // scan1, scan1perm, etc.
    // n_cores            = 4
    
    // Help message
    help               = false
}

// Process configuration
process {
    // Default settings for all processes
    shell = ['/bin/bash', '-euo', 'pipefail']
    
    // Single container for all processes
    container = 'dpbudke/qtl2-pipeline:latest'  // Update this to your container name
    
    // Resource defaults
    cpus   = 2
    memory = '4 GB'
    time   = '2h'
    
    // Error handling
    errorStrategy = 'retry'
    maxRetries    = 2
    
    // Process-specific overrides
    withName: PHENOTYPE_PROCESS {
        cpus   = 1
        memory = '2 GB'
        time   = '1h'
    }
    
    // Future process configurations
    // withName: GENOTYPE_PROCESS {
    //     cpus   = 4
    //     memory = '12 GB'
    //     time   = '2h'
    // }
    
    // withName: QTL_SCAN {
    //     cpus   = 4
    //     memory = '8 GB'
    //     time   = '4h'
    // }
}

// Execution profiles
profiles {
    
    // Local execution (default)
    standard {
        process.executor = 'local'
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
    }
    
    // Docker profile
    docker {
        process.executor = 'local'
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
        
        // Mount your source code directories
        docker.runOptions = "${docker.runOptions} -v /mnt/c/your-source-path:/opt/src:ro"
    }
    
    // Future: Cluster profiles
    // slurm {
    //     process.executor = 'slurm'
    //     process.queue = 'normal'
    //     docker.enabled = true
    // }
    
    // Development/testing profile
    test {
        params.phenotype_file = 'test_data/small_phenotypes.csv'
        params.study_prefix = 'Test'
        params.outdir = 'test_results'
        
        process {
            cpus = 1
            memory = '1 GB'
            time = '30m'
        }
    }
}

// Reporting and monitoring
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline.html"
}

report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report.html"
}

trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace.txt"
}

dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag.svg"
}

// Cleanup options
cleanup = false  // Set to true in production

// Container settings
docker {
    enabled = true
    temp = 'auto'
    
    // Registry settings (if using private registry)
    // registry = 'your-registry.com'
}

// Singularity settings (alternative to Docker)
singularity {
    enabled = false
    autoMounts = true
}

// Resource monitoring
monitor {
    enabled = false  // Enable for detailed resource monitoring
}